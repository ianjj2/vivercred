{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst TABLE_NAME = 'vendedoras';\nexport const subscribeToVendedoras = callback => {\n  // Real-time subscription\n  const channel = supabase.channel('vendedoras-changes').on('postgres_changes', {\n    event: '*',\n    schema: 'public',\n    table: TABLE_NAME\n  }, payload => {\n    fetchVendedoras().then(callback);\n  }).subscribe();\n\n  // Initial fetch\n  fetchVendedoras().then(callback);\n\n  // Return unsubscribe function\n  return () => {\n    supabase.removeChannel(channel);\n  };\n};\nexport const fetchVendedoras = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from(TABLE_NAME).select('*').order('valor', {\n    ascending: false\n  }).limit(10);\n  if (error) {\n    console.error('Erro ao buscar vendedoras:', error);\n    return [];\n  }\n  return data;\n};\nexport const addVendedora = async vendedora => {\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).insert([{\n    nome: vendedora.nome,\n    valor: Number(vendedora.valor),\n    qtd: Number(vendedora.qtd) || 0,\n    created_at: new Date().toISOString()\n  }]);\n  if (error) throw error;\n};\nexport const updateVendedora = async (id, vendedora) => {\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).update({\n    nome: vendedora.nome,\n    valor: Number(vendedora.valor),\n    qtd: Number(vendedora.qtd) || 0,\n    updated_at: new Date().toISOString()\n  }).eq('id', id);\n  if (error) throw error;\n};\nexport const deleteVendedora = async id => {\n  const {\n    error\n  } = await supabase.from(TABLE_NAME).delete().eq('id', id);\n  if (error) throw error;\n};","map":{"version":3,"names":["supabase","TABLE_NAME","subscribeToVendedoras","callback","channel","on","event","schema","table","payload","fetchVendedoras","then","subscribe","removeChannel","data","error","from","select","order","ascending","limit","console","addVendedora","vendedora","insert","nome","valor","Number","qtd","created_at","Date","toISOString","updateVendedora","id","update","updated_at","eq","deleteVendedora","delete"],"sources":["C:/Users/iamar/Desktop/ViverCred/src/services/vendedorasService.js"],"sourcesContent":["import { supabase } from './supabaseClient';\r\n\r\nconst TABLE_NAME = 'vendedoras';\r\n\r\nexport const subscribeToVendedoras = (callback) => {\r\n  // Real-time subscription\r\n  const channel = supabase\r\n    .channel('vendedoras-changes')\r\n    .on(\r\n      'postgres_changes',\r\n      { event: '*', schema: 'public', table: TABLE_NAME },\r\n      (payload) => {\r\n        fetchVendedoras().then(callback);\r\n      }\r\n    )\r\n    .subscribe();\r\n\r\n  // Initial fetch\r\n  fetchVendedoras().then(callback);\r\n\r\n  // Return unsubscribe function\r\n  return () => {\r\n    supabase.removeChannel(channel);\r\n  };\r\n};\r\n\r\nexport const fetchVendedoras = async () => {\r\n  const { data, error } = await supabase\r\n    .from(TABLE_NAME)\r\n    .select('*')\r\n    .order('valor', { ascending: false })\r\n    .limit(10);\r\n  if (error) {\r\n    console.error('Erro ao buscar vendedoras:', error);\r\n    return [];\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const addVendedora = async (vendedora) => {\r\n  const { error } = await supabase\r\n    .from(TABLE_NAME)\r\n    .insert([\r\n      {\r\n        nome: vendedora.nome,\r\n        valor: Number(vendedora.valor),\r\n        qtd: Number(vendedora.qtd) || 0,\r\n        created_at: new Date().toISOString(),\r\n      },\r\n    ]);\r\n  if (error) throw error;\r\n};\r\n\r\nexport const updateVendedora = async (id, vendedora) => {\r\n  const { error } = await supabase\r\n    .from(TABLE_NAME)\r\n    .update({\r\n      nome: vendedora.nome,\r\n      valor: Number(vendedora.valor),\r\n      qtd: Number(vendedora.qtd) || 0,\r\n      updated_at: new Date().toISOString(),\r\n    })\r\n    .eq('id', id);\r\n  if (error) throw error;\r\n};\r\n\r\nexport const deleteVendedora = async (id) => {\r\n  const { error } = await supabase\r\n    .from(TABLE_NAME)\r\n    .delete()\r\n    .eq('id', id);\r\n  if (error) throw error;\r\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,MAAMC,UAAU,GAAG,YAAY;AAE/B,OAAO,MAAMC,qBAAqB,GAAIC,QAAQ,IAAK;EACjD;EACA,MAAMC,OAAO,GAAGJ,QAAQ,CACrBI,OAAO,CAAC,oBAAoB,CAAC,CAC7BC,EAAE,CACD,kBAAkB,EAClB;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE,QAAQ;IAAEC,KAAK,EAAEP;EAAW,CAAC,EAClDQ,OAAO,IAAK;IACXC,eAAe,CAAC,CAAC,CAACC,IAAI,CAACR,QAAQ,CAAC;EAClC,CACF,CAAC,CACAS,SAAS,CAAC,CAAC;;EAEd;EACAF,eAAe,CAAC,CAAC,CAACC,IAAI,CAACR,QAAQ,CAAC;;EAEhC;EACA,OAAO,MAAM;IACXH,QAAQ,CAACa,aAAa,CAACT,OAAO,CAAC;EACjC,CAAC;AACH,CAAC;AAED,OAAO,MAAMM,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAM;IAAEI,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCgB,IAAI,CAACf,UAAU,CAAC,CAChBgB,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,OAAO,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC,CACpCC,KAAK,CAAC,EAAE,CAAC;EACZ,IAAIL,KAAK,EAAE;IACTM,OAAO,CAACN,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,EAAE;EACX;EACA,OAAOD,IAAI;AACb,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,MAAM;IAAER;EAAM,CAAC,GAAG,MAAMf,QAAQ,CAC7BgB,IAAI,CAACf,UAAU,CAAC,CAChBuB,MAAM,CAAC,CACN;IACEC,IAAI,EAAEF,SAAS,CAACE,IAAI;IACpBC,KAAK,EAAEC,MAAM,CAACJ,SAAS,CAACG,KAAK,CAAC;IAC9BE,GAAG,EAAED,MAAM,CAACJ,SAAS,CAACK,GAAG,CAAC,IAAI,CAAC;IAC/BC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACrC,CAAC,CACF,CAAC;EACJ,IAAIhB,KAAK,EAAE,MAAMA,KAAK;AACxB,CAAC;AAED,OAAO,MAAMiB,eAAe,GAAG,MAAAA,CAAOC,EAAE,EAAEV,SAAS,KAAK;EACtD,MAAM;IAAER;EAAM,CAAC,GAAG,MAAMf,QAAQ,CAC7BgB,IAAI,CAACf,UAAU,CAAC,CAChBiC,MAAM,CAAC;IACNT,IAAI,EAAEF,SAAS,CAACE,IAAI;IACpBC,KAAK,EAAEC,MAAM,CAACJ,SAAS,CAACG,KAAK,CAAC;IAC9BE,GAAG,EAAED,MAAM,CAACJ,SAAS,CAACK,GAAG,CAAC,IAAI,CAAC;IAC/BO,UAAU,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACrC,CAAC,CAAC,CACDK,EAAE,CAAC,IAAI,EAAEH,EAAE,CAAC;EACf,IAAIlB,KAAK,EAAE,MAAMA,KAAK;AACxB,CAAC;AAED,OAAO,MAAMsB,eAAe,GAAG,MAAOJ,EAAE,IAAK;EAC3C,MAAM;IAAElB;EAAM,CAAC,GAAG,MAAMf,QAAQ,CAC7BgB,IAAI,CAACf,UAAU,CAAC,CAChBqC,MAAM,CAAC,CAAC,CACRF,EAAE,CAAC,IAAI,EAAEH,EAAE,CAAC;EACf,IAAIlB,KAAK,EAAE,MAAMA,KAAK;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}